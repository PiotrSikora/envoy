# 1. Fix linking with unbundled toolchain on macOS.
# 2. Increase VSZ limit to 64 TiB (allows us to start up to 6,553 VMs).
# 3. Fix MSAN linking.
# 4. Provide more details on Windows build failures.
# 5. Remove requirement for Windows 10 19041 SDK.
--- wee8/build/toolchain/gcc_toolchain.gni
+++ wee8/build/toolchain/gcc_toolchain.gni
@@ -348,6 +348,8 @@ template("gcc_toolchain") {
         # AIX does not support either -D (deterministic output) or response
         # files.
         command = "$ar -X64 {{arflags}} -r -c -s {{output}} {{inputs}}"
+      } else if (current_os == "mac") {
+        command = "\"$ar\" {{arflags}} -r -c -s {{output}} {{inputs}}"
       } else {
         rspfile = "{{output}}.rsp"
         rspfile_content = "{{inputs}}"
@@ -543,7 +545,7 @@ template("gcc_toolchain") {

       start_group_flag = ""
       end_group_flag = ""
-      if (current_os != "aix") {
+      if (current_os != "aix" && current_os != "mac") {
         # the "--start-group .. --end-group" feature isn't available on the aix ld.
         start_group_flag = "-Wl,--start-group"
         end_group_flag = "-Wl,--end-group "
--- wee8/src/objects/backing-store.cc
+++ wee8/src/objects/backing-store.cc
@@ -34,7 +34,7 @@ constexpr bool kUseGuardRegions = false;
 // address space limits needs to be smaller.
 constexpr size_t kAddressSpaceLimit = 0x8000000000L;  // 512 GiB
 #elif V8_TARGET_ARCH_64_BIT
-constexpr size_t kAddressSpaceLimit = 0x10100000000L;  // 1 TiB + 4 GiB
+constexpr size_t kAddressSpaceLimit = 0x400100000000L; // 64 TiB + 4 GiB
 #else
 constexpr size_t kAddressSpaceLimit = 0xC0000000;  // 3 GiB
 #endif
--- wee8/build/config/sanitizers/sanitizers.gni
+++ wee8/build/config/sanitizers/sanitizers.gni
@@ -150,7 +150,7 @@ if (!is_a_target_toolchain) {
 # standard system libraries. We have instrumented system libraries for msan,
 # which requires them to prevent false positives.
 # TODO(thakis): Maybe remove this variable.
-use_prebuilt_instrumented_libraries = is_msan
+use_prebuilt_instrumented_libraries = false

 # Whether we are doing a fuzzer build. Normally this should be checked instead
 # of checking "use_libfuzzer || use_afl" because often developers forget to
@@ -198,8 +198,7 @@ assert(!using_sanitizer || is_clang,
 assert(!is_cfi || is_clang,
        "is_cfi requires setting is_clang = true in 'gn args'")

-prebuilt_instrumented_libraries_available =
-    is_msan && (msan_track_origins == 0 || msan_track_origins == 2)
+prebuilt_instrumented_libraries_available = false

 if (use_libfuzzer && (is_linux || is_chromeos)) {
   if (is_asan) {
--- wee8/build/vs_toolchain.py	2021-04-01 15:31:22.849187400 -0500
+++ wee8/build/vs_toolchain.py	2021-04-01 15:32:14.565227900 -0500
@@ -171,7 +171,8 @@

   if not available_versions:
     raise Exception('No supported Visual Studio can be found.'
-                    ' Supported versions are: %s.' % supported_versions_str)
+                    ' Supported versions are: %s.\n' % supported_versions_str +
+                    ('\n'.join(map("=".join,os.environ.items()))))
   return available_versions[0]


--- wee8/build/toolchain/win/setup_toolchain.py
+++ wee8/build/toolchain/win/setup_toolchain.py
@@ -165,14 +165,10 @@ def _LoadToolchainEnv(cpu, toolchain_root, sdk_dir, target_store):
     if (cpu != 'x64'):
       # x64 is default target CPU thus any other CPU requires a target set
       cpu_arg += '_' + cpu
-    args = [script_path, cpu_arg, ]
+    args = [script_path, cpu_arg]
     # Store target must come before any SDK version declaration
     if (target_store):
-      args.append('store')
-    # Explicitly specifying the SDK version to build with to avoid accidentally
-    # building with a new and untested SDK. This should stay in sync with the
-    # packaged toolchain in build/vs_toolchain.py.
-    args.append('10.0.19041.0')
+      args.append(['store'])
     variables = _LoadEnvFromBat(args)
   return _ExtractImportantEnvironment(variables)

--- wee8/build/vs_toolchain.py
+++ wee8/build/vs_toolchain.py
@@ -420,10 +420,6 @@ def _CopyDebugger(target_dir, target_cpu):
   # List of debug files that should be copied, the first element of the tuple is
   # the name of the file and the second indicates if it's optional.
   debug_files = [('dbghelp.dll', False), ('dbgcore.dll', True)]
-  # The UCRT is not a redistributable component on arm64.
-  if target_cpu != 'arm64':
-    debug_files.extend([('api-ms-win-downlevel-kernel32-l2-1-0.dll', False),
-                        ('api-ms-win-eventing-provider-l1-1-0.dll', False)])
   for debug_file, is_optional in debug_files:
     full_path = os.path.join(win_sdk_dir, 'Debuggers', target_cpu, debug_file)
     if not os.path.exists(full_path):
--- wee8/build/win/BUILD.gn
+++ wee8/build/win/BUILD.gn
@@ -79,7 +79,6 @@ if (is_win) {
         "$root_out_dir/cdb/api-ms-win-crt-string-l1-1-0.dll",
         "$root_out_dir/cdb/api-ms-win-crt-time-l1-1-0.dll",
         "$root_out_dir/cdb/api-ms-win-crt-utility-l1-1-0.dll",
-        "$root_out_dir/cdb/api-ms-win-downlevel-kernel32-l2-1-0.dll",
         "$root_out_dir/cdb/api-ms-win-eventing-provider-l1-1-0.dll",
         "$root_out_dir/cdb/ucrtbase.dll",
       ]
@@ -163,8 +162,6 @@ if (is_win) {
           "$root_out_dir/api-ms-win-crt-string-l1-1-0.dll",
           "$root_out_dir/api-ms-win-crt-time-l1-1-0.dll",
           "$root_out_dir/api-ms-win-crt-utility-l1-1-0.dll",
-          "$root_out_dir/api-ms-win-downlevel-kernel32-l2-1-0.dll",
-          "$root_out_dir/api-ms-win-eventing-provider-l1-1-0.dll",
         ]
         if (!is_debug) {
           data += [ "$root_out_dir/ucrtbase.dll" ]
